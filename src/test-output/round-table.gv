// The Round Table
digraph {
	program -> "Lib(stdio)"
	program -> Func_decl0
	Func_decl0 -> "Id(main)"
	Func_decl0 -> 0
	Func_decl0 -> IntType0
	Func_decl0 -> stmt_list0
	stmt_list0 -> For_stmt0
	For_stmt0 -> "Id(i)0"
	For_stmt0 -> "Assign_stmt(0)"
	"Assign_stmt(0)" -> "Id(i),IntType;(assign_stmt<0>)"
	"Assign_stmt(0)" -> "Value_literal(IntLiteral(0))(<Assign 1>)"
	For_stmt0 -> "Value_literal(IntLiteral(10))(<Return 1>)"
	For_stmt0 -> True0
	For_stmt0 -> Loop0
	Loop0 -> For_stmt1
	For_stmt1 -> "Id(j)1"
	For_stmt1 -> "Assign_stmt(1)"
	"Assign_stmt(1)" -> "Id(j),IntType;(assign_stmt<1>)"
	"Assign_stmt(1)" -> "Value_literal(IntLiteral(0))(<Assign 2>)"
	For_stmt1 -> "Value_literal(IntLiteral(20))(<Return 1>)"
	For_stmt1 -> True1
	For_stmt1 -> Loop1
	Loop1 -> If_stmt0
	If_stmt0 -> BinaryOp0
	BinaryOp0 -> "==(<BinaryOp 0>)"
	BinaryOp0 -> BinaryOp1
	BinaryOp1 -> "+ (<BinaryOp 1>)"
	BinaryOp1 -> BinaryOp2
	BinaryOp2 -> "% (<BinaryOp 2>)"
	BinaryOp2 -> "Id(i)(<BinaryOp 2>)"
	BinaryOp0 -> "IntLiteral(0)(<BinaryOp 0>)"
	BinaryOp1 -> "IntLiteral(6)(<BinaryOp 1>)"
	BinaryOp2 -> "Id(j)(<BinaryOp 2>)"
	If_stmt0 -> thenStmt0
	If_stmt0 -> elseStmt0
	thenStmt0 -> "Break(0)"
	elseStmt0 -> "Continue(0)"
	stmt_list0 -> Return_func_stmt0
	Return_func_stmt0 -> "Value_literal(Id(i))(<Return 1>)"
}
